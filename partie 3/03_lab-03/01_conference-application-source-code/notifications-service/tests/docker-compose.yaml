version: "3.8"
services:     
  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:3.4.1-debian-11-r0
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10  
  init-kafka:
    image: docker.io/bitnami/kafka:3.4.1-debian-11-r0
    depends_on:
      kafka: 
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic events-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
  notifications-services:
    depends_on:
      kafka: 
        condition: service_healthy
    container_name: notifications-service
    image: salaboy/notifications-service-0e27884e01429ab7e350cb5dff61b525
    environment:
      KAFKA_URL: kafka:9092
    ports: 
    - "8080:8080" 
volumes:
  kafka_data:
    driver: local            
# install crosplane sub-cli

curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
sudo mv crossplane kubectl-crossplane
sudo mv kubectl-crossplane /usr/local/bin

# install aws providers
kubectl crossplane xpkg install provider  xpkg.upbound.io/upbound/provider-aws-rds:v1.4.0 crossplane-provider-aws-rds
kubectl crossplane xpkg install provider  xpkg.upbound.io/upbound/provider-aws-elasticache:v1.4.0 crossplane-provider-aws-redis
kubectl crossplane xpkg install provider  xpkg.upbound.io/upbound/provider-aws-kafka:v1.4.0 crossplane-provider-aws-kafka
kubectl crossplane xpkg install provider  xpkg.upbound.io/upbound/provider-aws-ec2:v1.4.0 crossplane-provider-aws-ec2
kubectl get providers.pkg.crossplane.io

# create .aws-credentials.txt file (please never commit and push this file on public repo)
[default]
aws_access_key_id = 
aws_secret_access_key = 

kubectl create secret \
generic aws-secret \
-n crossplane-system \
--from-file=creds=./.aws-credentials.txt

cat <<EOF | kubectl apply -f -
apiVersion: aws.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  name: default
spec:
  credentials:
    source: Secret
    secretRef:
      namespace: crossplane-system
      name: aws-secret
      key: creds
EOF

# App Infrastructure on demand using Crossplane Compositions (in aws folder)
kubectl apply -f resources/

# create example-dbinstance secret for database password
kubectl create secret generic example-dbinstance --from-literal=username=salaboy --from-literal=password=conference-app

kubectl apply -f aws-db-sql.yml
kubectl get databases.eazytraining.io
kubectl get instances.rds.aws.upbound.io
kubectl describe instances.rds.aws.upbound.io  aws-db-sql-postgres

kubectl apply -f aws-db-keyvalue.yml
kubectl get databases.eazytraining.io
kubectl get cluster.elasticache.aws.upbound.io
kubectl describe cluster.elasticache.aws.upbound.io aws-db-keyavalue-redis


kubectl apply -f kafka/
kubectl get cluster.kafka.aws.upbound.io
kubectl describe cluster.kafka.aws.upbound.io  kafka-cluster

# Make sure to fill in the commented out aspects of the yaml file based off values from newly created AWS infrastructure.

helm install conference oci://ghcr.io/diranetafen/conference-app --version v1.0.0 -f app-values.yaml
kubectl get po

# delete app
kubectl delete -f aws-db-sql.yml
kubectl delete -f aws-db-keyvalue.yml
kubectl delete -f kafka/